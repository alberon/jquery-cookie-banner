{"version":3,"sources":["src/cookie-banner.js"],"names":["$","fn","cookieBanner","opts","CookieBanner","this","click","navigator","userAgent","match","options","extend","animate","close","cookie","name","text","value","link","url","closer","cssClass","testMode","initialise","removeCookie","alreadyConfirmed","render","renderBanner","class","id","append","renderLink","renderCloser","attr","href","target","join","on","closeAndAccept","addClass","removeClass","find","remove","e","cookieOpts","path","expires","domain","secure","Cookies","set","get","jQuery"],"mappings":"CAAA,SAAAA,GACA,YAeAA,GAAAC,GAAAC,aAAA,SAAAC,GACA,GAAAC,GAAAC,KACAC,EAAAC,UAAAC,UAAAC,MAAA,SAAA,aAAA,OAiKA,OA/JAJ,MAAAK,QAAAV,EAAAW,QAAA,GACAC,SACAC,OAAA,GAEAC,QACAC,KAAA,yBACAC,KAAA,iBACAC,OAAA,GAEAC,MACAC,IAAA,iBACAH,KAAA,mBAEAI,QACAC,SAAA,IAEAL,KAAA,0GAEAM,UAAA,GACAnB,GAKAE,KAAAkB,WAAA,WACAnB,EAAAM,QAAAY,UACAlB,EAAAoB,eAEApB,EAAAqB,oBACArB,EAAAsB,UAUArB,KAAAsB,aAAA,WACA,MAAA3B,GAAA,WACA4B,MAAA,gBACAC,GAAAzB,EAAAM,QAAAI,OAAAC,KACAC,KAAAZ,EAAAM,QAAAM,OACAc,OAAA1B,EAAA2B,cACAD,OAAA1B,EAAA4B,iBAQA3B,KAAA0B,WAAA,WACA,MAAA/B,GAAA,SACAiC,MACAC,KAAA9B,EAAAM,QAAAQ,KAAAC,IACAgB,OAAA,UAEAnB,KAAAZ,EAAAM,QAAAQ,KAAAF,QAUAX,KAAA2B,aAAA,WACA,MAAAhC,GAAA,WACA4B,OAAA,eAAAxB,EAAAM,QAAAU,OAAAC,UAAAe,KAAA,KACApB,KAAAZ,EAAAM,QAAAI,OAAAE,OACAqB,GAAA/B,EAAAF,EAAAkC,iBAQAjC,KAAAqB,OAAA,WACA,MAAA1B,GAAA,QAAAuC,SAAA,wBACAT,OAAA1B,EAAAuB,iBAQAtB,KAAAQ,MAAA,WACA,MAAAb,GAAA,QAAAwC,YAAA,wBACAC,KAAA,kBACAC,UASArC,KAAAiC,eAAA,SAAAK,GACA,kBAAAvC,GAAAM,QAAAE,QAAAC,MAKAT,EAAAM,QAAAE,QAAAC,MAAA8B,GAEAvC,EAAAS,OAGA,IAAA+B,KAkBA,YAhBA,KAAAxC,EAAAM,QAAAI,OAAA+B,OACAD,EAAAC,KAAAzC,EAAAM,QAAAI,OAAA+B,UAGA,KAAAzC,EAAAM,QAAAI,OAAAgC,UACAF,EAAAE,QAAA1C,EAAAM,QAAAI,OAAAgC,aAGA,KAAA1C,EAAAM,QAAAI,OAAAiC,SACAH,EAAAG,OAAA3C,EAAAM,QAAAI,OAAAiC,YAGA,KAAA3C,EAAAM,QAAAI,OAAAkC,SACAJ,EAAAI,OAAA5C,EAAAM,QAAAI,OAAAkC,QAGAC,QAAAC,IACA9C,EAAAM,QAAAI,OAAAC,KACAX,EAAAM,QAAAI,OAAAG,MACA2B,IASAvC,KAAAoB,iBAAA,WACA,MAAAwB,SAAAE,IAAA/C,EAAAM,QAAAI,OAAAC,OAQAV,KAAAmB,aAAA,WACA,MAAAyB,SAAAP,OAAAtC,EAAAM,QAAAI,OAAAC,OAGAV,KAAAkB,aAEAlB,OAEA+C","file":"cookie-banner.pkgd.min.js","sourcesContent":["(function($){\r\n    \"use strict\";\r\n\r\n    /**\r\n     * A small plugin that creates a minimalistic cookie banner\r\n     *\r\n     * author: Tony Lopez <tony@alberon.co.uk>\r\n     * licence: MIT\r\n     *\r\n     * Dependencies: [\r\n     *                  'js-cookie': https://github.com/js-cookie/js-cookie\r\n     *               ]\r\n     *\r\n     * @param opts\r\n     * @returns {jQuery}\r\n     */\r\n    $.fn.cookieBanner = function(opts){\r\n        var CookieBanner = this,\r\n            click = (navigator.userAgent.match(/iPad/i)) ? 'touchstart' : 'click';\r\n\r\n        this.options = $.extend(true, {\r\n            animate: {\r\n                close: false\r\n            },\r\n            cookie: {\r\n                name: 'accepted_cookie_policy',\r\n                text: 'Accept & Close',\r\n                value: true\r\n            },\r\n            link: {\r\n                url: '/cookie-policy',\r\n                text: 'Cookies Policy.'\r\n            },\r\n            closer: {\r\n                cssClass: ''\r\n            },\r\n            text: 'This site uses cookies to give you the best possible user ' +\r\n            'experience. To find out more please view our ',\r\n            testMode: false\r\n        }, opts);\r\n\r\n        /**\r\n         * Initialises the plugin\r\n         */\r\n        this.initialise = function(){\r\n            if(CookieBanner.options.testMode){\r\n                CookieBanner.removeCookie();\r\n            }\r\n            if(!CookieBanner.alreadyConfirmed()){\r\n                CookieBanner.render();\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Render the banner using the options set when the plugin is\r\n         * initialised\r\n         *\r\n         * @returns {JQuery}\r\n         */\r\n        this.renderBanner = function(){\r\n            return $('<div />', {\r\n                class: 'cookie-banner',\r\n                id: CookieBanner.options.cookie.name,\r\n                text: CookieBanner.options.text\r\n            }).append(CookieBanner.renderLink())\r\n              .append(CookieBanner.renderCloser());\r\n        };\r\n\r\n        /**\r\n         * Render the link using the options set when the plugin is initialised\r\n         *\r\n         * @returns {JQuery|HTMLElement}\r\n         */\r\n        this.renderLink = function(){\r\n            return $('<a />', {\r\n                attr: {\r\n                    href: CookieBanner.options.link.url,\r\n                    target: '_blank'\r\n                },\r\n                text: CookieBanner.options.link.text\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Render the close button using the options set when the plugin is\r\n         * initialised\r\n         *\r\n         * @returns {JQuery}\r\n         */\r\n        this.renderCloser = function(){\r\n            return $('<div />', {\r\n                class: ['cookie-close', CookieBanner.options.closer.cssClass].join(' '),\r\n                text: CookieBanner.options.cookie.text\r\n            }).on(click, CookieBanner.closeAndAccept);\r\n        };\r\n\r\n        /**\r\n         * Append the banner to the body\r\n         *\r\n         * @returns {JQuery}\r\n         */\r\n        this.render = function(){\r\n            return $('body').addClass('cookie-banner-active')\r\n                            .append(CookieBanner.renderBanner());\r\n        };\r\n\r\n        /**\r\n         * A basic removal for the banner to close it\r\n         *\r\n         * @returns {JQuery}\r\n         */\r\n        this.close = function(){\r\n            return $('body').removeClass('cookie-banner-active')\r\n                            .find('.cookie-banner')\r\n                            .remove();\r\n        };\r\n\r\n        /**\r\n         * Set a cookie and close the banner\r\n         *\r\n         * @param e\r\n         * @returns {*} Cookies set response\r\n         */\r\n        this.closeAndAccept = function(e){\r\n            if(typeof CookieBanner.options.animate.close === 'function'){\r\n                /**\r\n                 * Note: This is a blank function, so handle the removal of the\r\n                 * cookie banner in your own code\r\n                 */\r\n                CookieBanner.options.animate.close(e);\r\n            } else {\r\n                CookieBanner.close();\r\n            }\r\n\r\n            var cookieOpts = {};\r\n\r\n            if(typeof CookieBanner.options.cookie.path !== 'undefined'){\r\n                cookieOpts.path = CookieBanner.options.cookie.path;\r\n            }\r\n\r\n            if(typeof CookieBanner.options.cookie.expires !== 'undefined'){\r\n                cookieOpts.expires = CookieBanner.options.cookie.expires;\r\n            }\r\n\r\n            if(typeof CookieBanner.options.cookie.domain !== 'undefined'){\r\n                cookieOpts.domain = CookieBanner.options.cookie.domain;\r\n            }\r\n\r\n            if(typeof CookieBanner.options.cookie.secure !== 'undefined'){\r\n                cookieOpts.secure = CookieBanner.options.cookie.secure;\r\n            }\r\n\r\n            return Cookies.set(\r\n                CookieBanner.options.cookie.name,\r\n                CookieBanner.options.cookie.value,\r\n                cookieOpts\r\n            );\r\n        };\r\n\r\n        /**\r\n         * Test if the cookie is already set\r\n         *\r\n         * @returns {*}\r\n         */\r\n        this.alreadyConfirmed = function(){\r\n            return Cookies.get(CookieBanner.options.cookie.name);\r\n        };\r\n\r\n        /**\r\n         * Remove the cookie - Useful for testing\r\n         *\r\n         * @returns {*}\r\n         */\r\n        this.removeCookie = function(){\r\n            return Cookies.remove(CookieBanner.options.cookie.name);\r\n        };\r\n\r\n        this.initialise();\r\n\r\n        return this;\r\n    };\r\n})(jQuery);\r\n"]}